(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{338:function(s,t,a){"use strict";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("BPF Compiler Collection ("),a("a",{attrs:{href:"https://github.com/iovisor/bcc",target:"_blank",rel:"noopener noreferrer"}},[s._v("BCC"),a("OutboundLink")],1),s._v(") 是一套用於 eBPF，用來有效開發 kernel 追蹤修改程式的工具集。")]),s._v(" "),a("h3",{attrs:{id:"介紹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介紹"}},[s._v("#")]),s._v(" 介紹")]),s._v(" "),a("p",[s._v("BCC 我覺得可以看成兩個部分:")]),s._v(" "),a("ul",[a("li",[s._v("eBPF 的 python 和 lua 的前端，透過 BCC 我們可以使用 python 和 lua 比較簡單的開發 eBPF 的應用程式，BCC 將 bpf system call 還有 eBPC 程式編譯封裝成了 API，並提供一系列預先定義好的巨集和語法來簡化 eBPF 程式。")])]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" bcc "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" BPF\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" BPF "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("text "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\n#include <uapi/linux/bpf.h>\nint xdp_prog1 (struct xdp_md *ctx)\n{\n    return XDP_DROP;\n}\n"""')]),s._v("\nfn "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("load_func "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"xdp_prog1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" BPF"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("XDP"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("attach_xdp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"eth0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("以上面的範例來說，透過 BPF 物件實立化時會完成 eBPC bytecode 的編譯，然後透過 load_func 和 attach_xdp 就可以很簡單的將上面的 eBPF 程式碼編譯載入到 kernel 然後 attach 到 xdp 的 hook point 上。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("一系列使用自身框架開發的工具")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("BCC 使用自己的 API 開發了一系列可以直接使用的現成 bcc eBPF 程式，本身就幾乎涵蓋了 eBPF 的所有 program type，可以開箱即用，直接跳過 eBPF 的開發。")])]),s._v(" "),a("li",[a("p",[s._v("下圖包含了 BCC 對 linux kernel 各個模組實現的工具名稱")])]),s._v(" "),a("li",[a("p",[s._v("eBPC 本身和 bcc 相關的開發文件以及範例程式")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/pages/1168a347874aad4495c7db7248cfcb54.png",alt:"bcc tracing tools"}})])])])]),s._v(" "),a("li",[a("p",[s._v("可以看到前面很多天有參考到 BCC 的文件，資料非常地豐富")])])]),s._v(" "),a("h3",{attrs:{id:"安裝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安裝"}},[s._v("#")]),s._v(" 安裝")]),s._v(" "),a("p",[s._v("首先 bcc 的安裝大概有幾種方式")]),s._v(" "),a("ul",[a("li",[s._v("透過各大發行板的套件管理工具安裝")]),s._v(" "),a("li",[s._v("直接使用原始碼編譯安裝")]),s._v(" "),a("li",[s._v("透過 docker image 執行對於前兩著，bcc 官方的文件列舉了需多發行版的  "),a("a",{attrs:{href:"https://github.com/iovisor/bcc/blob/master/INSTALL.md",target:"_blank",rel:"noopener noreferrer"}},[s._v("安裝方式"),a("OutboundLink")],1),s._v("，所以可以很容易地照著官方文件安裝。以 ubuntu 來說，可以透過 Universe 或 iovisor 的 repo 安裝。然而必須要注意的是，目前 iovisor 和 universe 上面的 bcc 套件本的都比較陳舊，甚至沒有 20.04 和 22.04 對應的安裝源，因此透過 apt 安裝可能會出現版本不支援或安裝後連範例都跑不起來的問題。")])]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# use Universe")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# add-apt-repository universe")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# iovisor")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" apt-key adv "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--keyserver")]),s._v(" keyserver.ubuntu.com --recv-keys 4052245BD4284CDD\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"deb [trusted=yes] https://repo.iovisor.org/apt/xenial xenial-nightly main"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tee")]),s._v(" /etc/apt/sources.list.d/iovisor.list\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" update\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" bcc-tools libbcc-examples linux-headers-"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uname")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-r")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("因此特別建議透過原始碼來安裝會是比較穩妥的方式。一樣在 bcc 的的  "),a("a",{attrs:{href:"https://github.com/iovisor/bcc/blob/master/INSTALL.md",target:"_blank",rel:"noopener noreferrer"}},[s._v("安裝文檔"),a("OutboundLink")],1),s._v("  詳細列舉了在各個發行版本的各個版本下，要怎麼去安裝相依套件，然後編譯安裝 bcc。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-y")]),s._v(" bison build-essential cmake flex "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" libedit-dev "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  libllvm12 llvm-12-dev libclang-12-dev python zlib1g-dev libelf-dev libfl-dev python3-distutils\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone https://github.com/iovisor/bcc.git\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" bcc/build"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" bcc/build\ncmake "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v("\ncmake "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-DPYTHON_CMD")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("python3 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# build python3 binding")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("pushd")]),s._v(" src/python/\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("popd")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("這邊同樣以 ubuntu 舉例，首先因為 BCC 後端還是使用 LLVM，因此需要先安裝 llvm 以及 bcc 編譯需要的 cmake 等工具，然後後過 cmake 編譯安裝。")]),s._v(" "),a("p",[s._v("安裝完成後，昨天提到的 bcc 自己寫好的 kernel trace tools 會被安裝到   "),a("code",[s._v("/usr/share/bcc/tools")]),s._v(" ，因此可以直接 cd 到該目錄來玩，由於這些 tools 其實就是 python script，所以其實也可以直接透過 python3 執行 bcc repo 下 tools 目錄內的 python 檔，其結果其實是一樣的。")]),s._v(" "),a("p",[s._v("同樣的還有 examples 這個資料夾下的範例也會被安裝到   "),a("code",[s._v("/usr/share/bcc/examples")]),s._v("   目錄下。")]),s._v(" "),a("p",[s._v("最後是透過 docker 的方式執行 bcc。同樣參考 bcc 的  "),a("a",{attrs:{href:"https://github.com/iovisor/bcc/blob/master/QUICKSTART.md",target:"_blank",rel:"noopener noreferrer"}},[s._v("quickstart"),a("OutboundLink")],1),s._v("  文件，不過加上   "),a("code",[s._v("--pid=host")])]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-it")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--pid")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("host "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--privileged")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" /lib/modules:/lib/modules:ro "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" /usr/src:/usr/src:ro "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" /etc/localtime:/etc/localtime:ro "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--workdir")]),s._v(" /usr/share/bcc/tools "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  zlim/bcc\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("但是不論是直接使用   "),a("code",[s._v("zlim/bcc")]),s._v("   還是透過 bcc repo 內的 dockerfile 自行編譯，目前測試起來還是有許多問題，使用 zlim/bcc 在執行部分的 eBPF 程式時會編譯失敗，直接透過 dockerfile 編譯初步測試也沒辦法 build 成功，因此目前自行編譯使用可能還是相對比較穩定簡單快速的方式。")])])}),[],!1,null,null,null);t.default=e.exports}}]);